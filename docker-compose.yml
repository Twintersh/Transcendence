version: '3.8'

services:
  angular:
    container_name: angular
    networks:
      - transcendence
    restart: always
    build:
      context: containers/angular
      dockerfile: Dockerfile
    ports:
      - 4200:4200
    volumes:
      - ./frontend/angular:/var/www/frontend
    depends_on:
      - django

  django:
    container_name: django
    networks:
      - transcendence
    restart: always
    build:
      context: containers/django
      dockerfile: Dockerfile
    env_file:
      .env
    ports:
      - 8000:8000
    volumes:
      - ./backend/app/back:/var/www/backend
    depends_on:
      postgresql:
        condition: service_healthy

  redis:
    image: redislabs/redismod
    container_name: redis
    restart: always
    ports:
      -  6379:6379
    networks:
      - transcendence
    depends_on:
      - django

  postgresql:
    container_name: postgresql
    build:
      context: ./containers/postgres/
      dockerfile: Dockerfile
    restart: always
    env_file:
      .env
    networks:
      - transcendence
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: --no-locale --encoding=UTF-8
      PG_DATA: /var/lib/postgresql/data
    healthcheck:
      test: nc -w 5 127.0.0.1 5432
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./volumes/db:/var/lib/postgresql/data
 
  adminer:
    container_name: adminer
    image: adminer:latest
    restart: always
    networks:
      - transcendence
    env_file:
      .env
    ports:
      - "${ADMINER_PORT}:8080"
    depends_on:
      postgresql:
        condition: service_healthy

networks:
  transcendence:
    driver: bridge
