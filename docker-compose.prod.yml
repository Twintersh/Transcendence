version: '3.8'

services:
    web:
        build : ./frontend/
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./frontend/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./frontend/nginx/ssl:/etc/nginx/ssl
        restart: always

    django:
        container_name: django
        networks:
          - transcendence
        build:
          context: containers/django-prod
          dockerfile: Dockerfile
        env_file:
          .env
        ports:
          - 8000:8000
        volumes:
          - ./backend/app/back:/var/www/backend
          - ./frontend/nginx/ssl:/var/www/backend/ssl
        depends_on:
          postgresql:
            condition: service_healthy
        # healthcheck :
        #   test:  nc -w 5 127.0.0.1 4200
        #   interval: 5s
        #   retries: 30

    redis:
        image: redislabs/redismod
        container_name: redis
        ports:
          -  6379:6379
        volumes:
          - redis:/data
        networks:
          - transcendence
        depends_on:
          - django

    postgresql:
        container_name: postgresql
        build:
          context: ./containers/postgres/
          dockerfile: Dockerfile
        restart: always
        env_file:
          .env
        networks:
          - transcendence
        environment:
          POSTGRES_DB: ${DB_NAME}
          POSTGRES_USER: ${DB_USER}
          POSTGRES_PASSWORD: ${DB_PASSWORD}
          POSTGRES_INITDB_ARGS: --no-locale --encoding=UTF-8
          PG_DATA: /var/lib/postgresql/data
        volumes:
          - db:/var/lib/postgresql/data
        healthcheck:
          test: nc -w 5 127.0.0.1 5432
          interval: 30s
          timeout: 10s
          retries: 5
        ports:
          - "${DB_PORT}:5432"
 
    adminer:
        container_name: adminer
        image: adminer:latest
        restart: on-failure
        networks:
          - transcendence
        env_file:
          .env
        ports:
          - "${ADMINER_PORT}:8080"
        depends_on:
          postgresql:
            condition: service_healthy

networks:
  transcendence:
    driver: bridge

volumes:
  db:
    driver: local
    driver_opts:
      type: none
      device: ./volumes/db
      o: bind

  redis:
    driver: local
    driver_opts:
      type: none
      device: ./volumes/redis
      o: bind
